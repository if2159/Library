/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ianfennen.java.guiBeans;

import com.ianfennen.java.dataObjects.Book;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Ian Fennen
 */
public class FileLoaderBean extends javax.swing.JPanel {

    /**
     * {@code List} That contains all books loaded, null if file not loaded.
     */
    ArrayList<Book> bookList = null;

    public static final String FILE_LOADED_EVENT = "FILE_LOADED_EVENT";
    public static final String FILE_STATE_CHANGED = "FILE_STATE_CHANGED";

    /**
     * Creates new form FileLoaderBean
     */
    public FileLoaderBean() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputFileNameLbl = new javax.swing.JLabel();
        inputFileField = new javax.swing.JTextField();
        browseFileBtn = new javax.swing.JButton();
        loadFileBtn = new javax.swing.JButton();

        inputFileNameLbl.setText("Input File Name: ");

        browseFileBtn.setText("Browse File");
        browseFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseFileBtnActionPerformed(evt);
            }
        });

        loadFileBtn.setText("Load File");
        loadFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadFileBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inputFileNameLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputFileField, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(browseFileBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loadFileBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputFileNameLbl)
                    .addComponent(inputFileField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseFileBtn)
                    .addComponent(loadFileBtn))
                .addContainerGap(35, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void browseFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseFileBtnActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.showOpenDialog(this);
        String fileName = fileChooser.getSelectedFile().getAbsolutePath();
        inputFileField.setText(fileName);
    }//GEN-LAST:event_browseFileBtnActionPerformed

    private void loadFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadFileBtnActionPerformed
        loadFile(inputFileField.getText());
    }//GEN-LAST:event_loadFileBtnActionPerformed

    private void loadFile(String fileName) {
        try {
            Scanner fileIn = new Scanner(new File(fileName));
            bookList = new ArrayList();
            System.out.println(fileIn.hasNext() + fileName);
            while (fileIn.hasNext()) {
                String line = fileIn.nextLine();
                System.out.println("Line: " + line);
                bookList.add(lineToBook(line));
            }

            System.out.println("Inside loadFile: " + bookList);
            firePropertyChange(FILE_LOADED_EVENT, "", FILE_STATE_CHANGED);

        } catch (FileNotFoundException | InputMismatchException e) {
            displayError("Error reading from file: " + fileName);
            bookList = null;
        }

    }

    /**
     * Converts a line of text separated by commas into a book object.
     *
     * @param line The line of text that contains the info for a {@code Book}
     * @return The {@code Book} created from {@code line}
     */
    private Book lineToBook(String line) throws InputMismatchException {
        try {
            String[] ar = line.split(",");
            String title = ar[0];
            String author = ar[1];
            int isbn = Integer.parseInt(ar[2]);
            System.out.println("Book: " + new Book(title, author, isbn));
            return new Book(title, author, isbn);
        } catch (Exception e) {
            throw new InputMismatchException("Input File Format Invalid");
        }
    }

    /**
     * Returns the {@code bookList}, can be {@code null} if the book has not been loaded.
     *
     * @return The {@code bookList} with the loaded books. Returns {@code null} if file has not been loaded.
     */
    public ArrayList<Book> getBookList() {
        return bookList;
    }

    /**
     * Displays an error window with text {@code errorMsg}.
     *
     * @param errorMsg The error message displayed to the user. This is the entire text shown.
     */
    private void displayError(String errorMsg) {
        JOptionPane.showMessageDialog(this,
                errorMsg,
                "Error",
                JOptionPane.ERROR_MESSAGE);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseFileBtn;
    private javax.swing.JTextField inputFileField;
    private javax.swing.JLabel inputFileNameLbl;
    private javax.swing.JButton loadFileBtn;
    // End of variables declaration//GEN-END:variables
}
